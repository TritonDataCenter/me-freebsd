#!/usr/local/bin/bash
#
# Copyright (c) 2013 Joyent Inc., All rights reserved.
#

# This is a FreeBSD specific script

# Script that will use mdata fields to check if customer has DUO information configured
# If the mdata fields are set and valid then this script will configure DUO  
# By default this script is called on each boot

# To have this script auto configure SSHD to use DUO the following Mdata fields must be set:
# 
# If the following is not set then the script will exit. This field acts as the opt-in
#   duo_enable = true
#
# The following are customer DUO account information that they need to first get from:
# https://www.duosecurity.com/joyent
#
#    duo_ikey = IKEK_FORM_DUO_ACCOUNT
#    duo_skey = SKEY_FROM_CUSTOMER_ACCOUNT
#    duo_host = HOST_FROM_CUSTOMER_ACCOUNT

# load common functions and vars
. /lib/smartdc/lib_smartdc_scripts.cfg

# location of sshd_config file on this system
sshd_config_file='/etc/ssh/sshd_config'

### check for opt-in for DUO
duo_mdata_enable=$($MDATA_GET_BIN "duo_enable" 2>>/dev/console)
duo_mdata_enable_return=$?
duo_mdata_enable=$(echo "$duo_mdata_enable" | tr [:upper:] [:lower:] | tr -d ' ')

if [ $duo_mdata_enable_return -eq 0 -a "$duo_mdata_enable" == "true" ]; then
  lib_smartdc_info "DUO enable set in mdata. Starting auto config of DUO on this system."
else
  lib_smartdc_info "DUO enable not set in mdata. Skipping auto config of DUO on this system."
  lib_smartdc_info "You can enable DUO by getting an account at: https://www.duosecurity.com/joyent"
  lib_smartdc_info "Then setting the following Mdata fields:"
  lib_smartdc_info "   duo_enable = true"
  lib_smartdc_info "   duo_ikey = YOUR_DUO_IKEY"
  lib_smartdc_info "   duo_skey = YOUR_DUO_SKEY"
  lib_smartdc_info "   duo_host = YOUR_DUO_API_HOST"
  exit 1
fi

# If opt-in is true get rest of needed DUO config info
duo_mdata_ikey=$($MDATA_GET_BIN "duo_ikey" 2>>/dev/console)
duo_mdata_ikey_return=$?
duo_mdata_skey=$($MDATA_GET_BIN "duo_skey" 2>>/dev/console)
duo_mdata_skey_return=$?
duo_mdata_host=$($MDATA_GET_BIN "duo_host" 2>>/dev/console)
duo_mdata_host_return=$?

# remove any spaces from ikey, skey and host
# these sometimes are copied and pasted into the mdata fields by customers
duo_mdata_ikey=$( echo $duo_mdata_ikey | tr -d ' ' )
duo_mdata_skey=$( echo $duo_mdata_skey | tr -d ' ' )
duo_mdata_host=$( echo $duo_mdata_host | tr -d ' ' )

### Check for valid DUO user fields set in mdata
if [ $duo_mdata_ikey_return -ne 0 -a ! -z "$duo_mdata_ikey" ]; then
  lib_smartdc_info "DUO ikey not set in mdata. Skipping auto config of DUO on this system."
  lib_smartdc_info "More information about DUO can be found at: https://www.duosecurity.com/joyent"
  lib_smartdc_fatal "You will have to manually configure DUO or set the mdata field duo_ikey and re-run this script"
fi

if [ $duo_mdata_skey_return -ne 0 -a ! -z "$duo_mdata_skey" ]; then
  lib_smartdc_info "DUO skey not set in mdata. Skipping auto config of DUO on this system."
  lib_smartdc_info "More information about DUO can be found at: https://www.duosecurity.com/joyent"
  lib_smartdc_fatal "You will have to manually configure DUO or set the mdata field duo_skey and re-run this script"
fi

if [ $duo_mdata_host_return -ne 0 -a ! -z "$duo_mdata_host" ]; then
  lib_smartdc_info "DUO host not set in mdata. Skipping auto config of DUO on this system."
  lib_smartdc_info "More information about DUO can be found at: https://www.duosecurity.com/joyent"
  lib_smartdc_fatal "You will have to manually configure DUO or set the mdata field duo_host and re-run this script"
fi

### Check login_duo config file and configure if not set up

# Check for DUO login binary
if [ -e $DUO_LOGIN_BIN ]; then
  lib_smartdc_info "DUO login binary found at $DUO_LOGIN_BIN"
else
  lib_smartdc_info "DUO login binary not found at $DUO_LOGIN_BIN"
  lib_smartdc_fatal "You will need the DUO login binary. Contact Joyent support to get this file in place on your system."
fi

# Check for config file and create a minimal one if needed
if [ -e $DUO_LOGIN_CONFIG ]; then
  lib_smartdc_info "DUO config file found at $DUO_LOGIN_CONFIG"
else
  lib_smartdc_info "DUO config file not found at $DUO_LOGIN_CONFIG"
  lib_smartdc_info "Creating file and settng permissions"
 
  # get config directory 
  DUO_LOGIN_CONFIG_DIR=$( echo $DUO_LOGIN_CONFIG | awk '{match($1, "^.*/"); print substr($1, 1, RLENGTH-1)}' )

  # check for directory and make it if it does not exist
  if [ ! -d $DUO_LOGIN_CONFIG_DIR ]; then
     lib_smartdc_info "Creating $DUO_LOGIN_CONFIG_DIR directory"
     mkdir -p $DUO_LOGIN_CONFIG_DIR

    # if the directory is not there then somethign is wrong 
    if [ ! -d $DUO_LOGIN_CONFIG_DIR ]; then
       lib_smartdc_fatal "Unable to create the directory $DUO_LOGIN_CONFIG_DIR. Please check this location and manually create this directory and re-run this script."
    fi 
  else
     lib_smartdc_info "DUO config directory exist - $DUO_LOGIN_CONFIG_DIR"
  fi

  # creating default minimal DUO login config file
  echo '[duo]' > $DUO_LOGIN_CONFIG
  echo '; Required Fields - Information is available form your DUO account' >> $DUO_LOGIN_CONFIG
  echo '; More info can be found at:' >> $DUO_LOGIN_CONFIG
  echo '; https://www.duosecurity.com/joyent' >> $DUO_LOGIN_CONFIG
  echo ' ' >> $DUO_LOGIN_CONFIG
  echo '; REQUIRED - Duo integration key' >> $DUO_LOGIN_CONFIG
  echo 'ikey =' >> $DUO_LOGIN_CONFIG
  echo ' ' >> $DUO_LOGIN_CONFIG
  echo '; REQUIRED - Duo secret key' >> $DUO_LOGIN_CONFIG
  echo 'skey =' >> $DUO_LOGIN_CONFIG
  echo ' ' >> $DUO_LOGIN_CONFIG
  echo '; REQUIRED - Duo API hostname' >> $DUO_LOGIN_CONFIG
  echo 'host =' >> $DUO_LOGIN_CONFIG

  chmod 600 $DUO_LOGIN_CONFIG
  chown root:root $DUO_LOGIN_CONFIG
fi

duo_config_ikey=$( grep "^ikey" $DUO_LOGIN_CONFIG | cut -d "=" -f2 | tr -d ' ' )
duo_config_skey=$( grep "^skey" $DUO_LOGIN_CONFIG | cut -d "=" -f2 | tr -d ' ' )
duo_config_host=$( grep "^host" $DUO_LOGIN_CONFIG | cut -d "=" -f2 | tr -d ' ' )


# ikey check and update
if [ "$duo_config_ikey" == "$duo_mdata_ikey" ]; then
  lib_smartdc_info "Config file and mdata ikey are the same"
else
  lib_smartdc_info "Config file and mdata ikey are the different - updating config file with mdata ikey"
  
  # update ikey in config file
  sed -rI '' "/^ikey.*$/s//ikey = $duo_mdata_ikey/" $DUO_LOGIN_CONFIG
 
  # check to see if correct ikey line is there
  updated_duo_config_ikey=$( grep "^ikey" $DUO_LOGIN_CONFIG | cut -d "=" -f2 | tr -d ' ' )
 
  if [ "$duo_mdata_ikey" == "$updated_duo_config_ikey" ]; then
    lib_smartdc_info "Config file updated with mdata ikey"
  else 
  # if not just add new line to end of file ( highly unlikely but possable )
    lib_smartdc_info "Config file not updated with mdata ikey"
    lib_smartdc_info "Adding ikey line to end of config file with mdata ikey"
    echo "ikey = $duo_mdata_ikey" >> $DUO_LOGIN_CONFIG
  fi
fi
 
# skey check and update
if [ "$duo_config_skey" == "$duo_mdata_skey" ]; then
  lib_smartdc_info "Config file and mdata skey are the same"
else
  lib_smartdc_info "Config file and mdata skey are the different - updating config file with mdata skey"
  
  # update skey in config file
  sed -rI '' "/^skey.*$/s//skey = $duo_mdata_skey/" $DUO_LOGIN_CONFIG
 
  # check to see if correct skey line is there
  updated_duo_config_skey=$( grep "^skey" $DUO_LOGIN_CONFIG | cut -d "=" -f2 | tr -d ' ' )
 
  if [ "$duo_mdata_skey" == "$updated_duo_config_skey" ]; then
    lib_smartdc_info "Config file updated with mdata skey"
  else 
  # if not just add new line to end of file ( highly unlikely but possable )
    lib_smartdc_info "Config file not updated with mdata skey"
    lib_smartdc_info "Adding skey line to end of config file with mdata skey"
    echo "skey = $duo_mdata_skey" >> $DUO_LOGIN_CONFIG
  fi
fi

# host check and update
if [ "$duo_config_host" == "$duo_mdata_host" ]; then
  lib_smartdc_info "Config file and mdata host are the same"
else
  lib_smartdc_info "Config file and mdata host are the different - updating config file with mdata host"
  
  # update host in config file
  sed -rI '' "/^host.*$/s//host = $duo_mdata_host/" $DUO_LOGIN_CONFIG
 
  # check to see if correct skey line is there
  updated_duo_config_host=$( grep "^host" $DUO_LOGIN_CONFIG | cut -d "=" -f2 | tr -d ' ' )
 
  if [ "$duo_mdata_host" == "$updated_duo_config_host" ]; then
    lib_smartdc_info "Config file updated with mdata host"
  else 
  # if not just add new line to end of file ( highly unlikely but possable )
    lib_smartdc_info "Config file not updated with mdata host"
    lib_smartdc_info "Adding host line to end of config file with mdata host"
    echo "host = $duo_mdata_host" >> $DUO_LOGIN_CONFIG
  fi
fi

# make sure DUO API host is real, can ping and curl on https
updated_duo_config_host=$( grep "^host" $DUO_LOGIN_CONFIG | cut -d "=" -f2 | tr -d ' ' )
out=$( host $updated_duo_config_host )
return_value=$?

if [ $return_value -ne 0 ]; then
  lib_smartdc_info "Invalid DUO API host ( $updated_duo_config_host ) - $out"
  lib_smartdc_fatal "Unable to configure DUO. Check DUO API host and make sure it is real and resolves to an IP."
else 
  lib_smartdc_info "Valid DUO API host ( $updated_duo_config_host )"
  out=$( ping -nqc 3 $updated_duo_config_host | grep loss | cut -d ',' -f3 | grep '100%' | wc -l )
      
  if [ $out -ne 0 ]; then
    lib_smartdc_info "Unable to ping DUO API host ( $updated_duo_config_host )"
    lib_smartdc_fatal "Unable to configure DUO. Check route to DUO API host."
  else
    lib_smartdc_info "Can ping DUO API host ( $updated_duo_config_host )"

    out=$( curl -sI https://${updated_duo_config_host} | grep 'Server:' | grep -i 'duo' | wc -l )
    if [ $out -eq 0 ]; then
      lib_smartdc_info "Unable to use https to get to DUO API host ( $updated_duo_config_host )"
      lib_smartdc_fatal "Unable to configure DUO. Check firewalls to ensure that https from DUO API host is not blocked."
    else
      lib_smartdc_info "Can get https reply from DUO API host ( $updated_duo_config_host )"
    fi 
  fi
fi

# Check sshd config and configure if not set up
if [ ! -f $sshd_config_file ]; then
  lib_smartdc_info "Unable to fine SSHD config file at $sshd_config_file"
  lib_smartdc_fatal "Unable to configure DUO. Add the following to yoru SSHD config file and restart SSHD: ForceCommand $DUO_LOGIN_BIN"
else
  # see if DUO is already configured and uncommented in $sshd_config_file
  out=$( grep "^ForceCommand" $sshd_config_file | grep $DUO_LOGIN_BIN | wc -l )
  if [ $out -ne 0 ]; then
     lib_smartdc_info "DUO is already configured in SSHD config file and should be active"
  else
     lib_smartdc_info "Configured DUO in SSHD config file ( $sshd_config_file )"
     echo " " >> $sshd_config_file
     echo "# DUO authentication" >> $sshd_config_file
     echo "# To enable uncomment" >> $sshd_config_file
     echo "# more info can be found at:" >> $sshd_config_file
     echo "# https://www.duosecurity.com/joyent" >> $sshd_config_file
     echo "ForceCommand /opt/local/duo/login_duo" >> $sshd_config_file
     
     lib_smartdc_info "Restarting SSHD to make DUO active"
     service sshd restart
  fi
fi

# if we get to this point DUO should be active
lib_smartdc_info "DUO is configured on this system. To test you can run the command: $DUO_LOGIN_BIN "

exit 0
