#!/usr/local/bin/bash
#
# Copyright (c) 2013 Joyent Inc., All rights reserved.
#
# Gets Alert, Info and Tips from joyent MOTD server

# load common functions and vars
. /lib/smartdc/lib_smartdc_scripts.cfg

# initializing var
INTERNET_CHECK_RETURN=0   

# Test to see that the inter net is alive
internet_check() {
   # ping test
   PACKET_LOSS=$($PING_BIN -nqc 3 -i .1 $PING_SERVER | tail -n 2 | grep loss | cut -d, -f3 | sed -r 's/\s+/:/g' | cut -d '%' -f1 | cut -d '.' -f1)

   if [[ $PACKET_LOSS -eq 0 ]]; then
      INTERNET_CHECK_RETURN=1   
   elif [[ $PACKET_LOSS -eq 100 ]]; then
      INTERNET_CHECK_RETURN=0   
      lib_smartdc_info "100% packet loss from $PING_SERVER"
      return
   else
      INTERNET_CHECK_RETURN=1   
   fi 

   # Test Joyent MOTD server
   CURL_STATUS=`$CURL_BIN -sI ${MOTD_URL}?t=a | grep '200 OK'`

   if [[ ! -z $CURL_STATUS ]]; then
      INTERNET_CHECK_RETURN=1
   else
      INTERNET_CHECK_RETURN=0
      lib_smartdc_info "Non 200 OK header return from $MOTD_URL"
      return
   fi 
}

# Gets OS we can set this as 2
# since this is a linux specific script
get_os() {
   OS=$(grep linux_distro $JOYENT_VERSION_FILE)
   if [[ ! -z $OS ]]; then
      OS='&o=3';
   fi
}

# distro is parsed from /etc/joyent_version
get_distro() {
   DISTRO='&d=1'
}

# distro version is parsed from /etc/joyent_version
get_distro_version() {
   DISTRO_VER=$(grep 'bsd_distro_version:' $JOYENT_VERSION_FILE | cut -d':' -f 2 | tr -d ' ')
   if [[ ! -z $DISTRO_VER ]]; then
      DISTRO_VER="&v=$DISTRO_VER"
   else
      DISTRO_VER=''
   fi
}

# dataset version is parsed from /etc/joyent_version
get_dataset_version() {
   DATASET_VER=$(grep 'joyent_dataset_version' $JOYENT_VERSION_FILE | cut -d':' -f 2 | tr -d ' ')
   if [[ ! -z $DATASET_VER ]]; then
      DATASET_VER="&z=${DATASET_VER}"
   else
      DATASET_VER=''
   fi
}

get_alert() {
  ALERT_RETURN=`$CURL_BIN -s ${MOTD_URL}?t=a${OS}${DISTRO}${DISTRO_VER}${DATASET_VER} | sed 's/<BR>//g' | sed 's/<br>//g'`
}


get_info() {
  INFO_RETURN=`$CURL_BIN -s ${MOTD_URL}?t=i${OS}${DISTRO}${DISTRO_VER}${DATASET_VER} | sed 's/<BR>//g' | sed 's/<br>//g'`
}

get_tip() {
  TIP_RETURN=`$CURL_BIN -s ${MOTD_URL}?t=t${OS}${DISTRO}${DISTRO_VER}${DATASET_VER} | sed 's/<[BR|br]>//g' | sed 's/<br>//g'`
}

# Start of Main

# Make sure version and product files exist
if [ ! -f $JOYENT_VERSION_FILE ]; then
   lib_smartdc_fatal "$JOYENT_VERSION_FILE not found"
fi

if [ ! -f $JOYENT_PRODUCT_FILE ]; then
   lib_smartdc_fatal "$JOYENT_PRODUCT_FILE not found"
fi

get_os
get_distro
get_distro_version
get_dataset_version

internet_check

if [ $INTERNET_CHECK_RETURN -eq 1 ]; then
   case $1 in
      [aA]) get_alert
            echo -e "$ALERT_RETURN"
            ;;
      [iI]) get_info
            echo -e "$INFO_RETURN"
            ;;
      [tT]) get_tip
            echo -e "$TIP_RETURN"
            ;;
         *) echo "ERROR - argument for $0 must be: a, i or t"
            lib_smartdc_fatal "BAD argument - $1 - sent to $0"
   esac
else
   lib_smartdc_fatal "Can not connect to the MOTD server - ${MOTD_URL}"
fi

exit 0
