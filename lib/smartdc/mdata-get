#!/usr/bin/env bash
#
# Copyright (c) 2013 Joyent Inc., All rights reserved.
#
# Note: for boot scripts, FD 2 (stderr) should be redirected to /dev/console
# by the caller so that metadata errors are noticed.
#
# EXIT CODES:
#
# 0 - success, value will be on stdout
# 1 - not found, server responded and there is no such key
# 2 - error getting metadata for key
# 3 - invalid usage
# 4 - serial device not found 
# 5 - user not part of serial device group
# 6 - group does not have read/write perms for serial device

# load common functions and vars
. /lib/smartdc/lib_smartdc_scripts.cfg

# NOTE: do not use lib_smartdc_fatal here as it will exit 1
#       use lib_smartdc_info instead and let this script
#       exit with own codes

if [[ $DEBUG -gt 5 ]]; then
  set -o xtrace
fi

key=$1
if [[ -z ${key} ]]; then
    lib_smartdc_info "ERROR: $0 called without a key"
    echo "Usage: $0 <key>" >&2
    echo " "
    exit 3
fi

NC_SOCK=
DISABLE_ECHO="yes"
TIMEOUT=5
SERIAL_DEV=$MDATA_SERIAL_PORT

if [[ ! -e $SERIAL_DEV ]]; then
  lib_smartdc_info "ERROR: $SERIAL_DEV does not exist"
  exit 4
fi

# set serial baud higher so it does not time out
stty -f ${SERIAL_DEV}.init 115200

# Check to see if user running the script had permissions to SERIAL_DEV
# only checking for non-root users
user=$(whoami)
if [[ $EUID != 0 ]] ; then
  lib_smartdc_log "WARNING: non-root user ( $user / $EUID ) running $0"

  # see if serial device is world readable
  world_read_rights=$( /usr/bin/stat -c %A $SERIAL_DEV | cut -c 8 )
  world_write_rights=$( /usr/bin/stat -c %A $SERIAL_DEV | cut -c 9 )
  if [[ "$world_read_rights" == "r" -a "$world_write_rights" == "w" ]]; then
     lib_smartdc_log "WARNING: world read/write rights set for $SERIAL_DEV"
  else
     serial_dev_group=$( /usr/bin/stat -c %G $SERIAL_DEV )
     user_in_serial_dev_group=$( /usr/bin/groups | grep $serial_dev_group | wc -l )
     # see if user is in serial device group
     if [[ $user_in_serial_dev_group -eq 0 ]]; then
       lib_smartdc_info "WARNING: user ( $user ) not in group with read rights for $SERIAL_DEV"
       lib_smartdc_info "exiting $0 as user can not get mdata. Add user ( $user ) to $serial_dev_group for them to run this script"
       exit 5
     else
       # see if serial device group is readable
       group_read_rights=$( /usr/bin/stat -c %A $SERIAL_DEV | cut -c 5 )
       group_write_rights=$( /usr/bin/stat -c %A $SERIAL_DEV | cut -c 6 )

       if [[ "$group_read_rights" != "r" -o "$group_write_rights" != "w" ]]; then
         lib_smartdc_info "WARNING: group does not have read\write rights for $SERIAL_DEV"
         lib_smartdc_info "exiting $0 as user can not get mdata. Add read\write permissions for $serial_dev_group to $SERIAL_DEV for them to run this script"
         exit 6
      fi
    fi
  fi
fi

# If we make it here user can access serial device to get mdata
lib_smartdc_log "$user accessing $SERIAL_DEV to get meta data for $key"

if [[ -n ${NC_SOCK} ]]; then
    coproc nc -U ${NC_SOCK}
    exec <&${COPROC[0]} 3>&${COPROC[1]}
else
    exec <${SERIAL_DEV} 3>>${SERIAL_DEV}
fi

IFS=$'\n'
if [[ ${DISABLE_ECHO} == "yes" ]]; then
    stty -echo
fi

got_all_data=0
keep_trying=1
while [[ ${keep_trying} -eq 1 ]]; do
    echo "GET ${key}" >&3
    result=""

    # First line will be a status.
    read -t ${TIMEOUT} status
    retval=$?
    if [[ ${retval} -gt 128 ]]; then
        lib_smartdc_info "mdata-get: timeout getting status. (exit code: ${retval})"
        echo "mdata-get: timeout getting status. (exit code: ${retval})" >&2
        continue
    elif [[ ${retval} -ne 0 ]]; then
        lib_smartdc_info "mdata-get: failed to read data from metadata agent. (exit code: ${retval})"
        echo "mdata-get: failed to read data from metadata agent. (exit code: ${retval})" >&2
        exit 2
    fi

    if [[ ${status} == "NOTFOUND" ]]; then
        echo "No metadata for ${key}"
        exit 1
    elif [[ ${status} == "invalid command" ]]; then
	keep_trying=1
    elif [[ ${status} != "SUCCESS" ]]; then
        lib_smartdc_info "Error getting metadata for key ${key}: ${status}"
        echo "Error getting metadata for key ${key}: ${status}"
        exit 2
    fi

    while read -t ${TIMEOUT} line; do
        if [[ ${line} == "." ]]; then
            # response is terminated by '.' on line by itself.
            got_all_data=1
            break;
        fi
        # If a line begins with a '.' it was escaped, remove that dot.
        line="${line#.}\n"
        result="${result}${line}"
        keep_trying=0
    done
done

if [[ ${got_all_data} -ne 1 ]]; then
     lib_smartdc_info "mdata-get: error getting results. Please try again."
     echo "mdata-get: error getting results. Please try again." >&2
     exit 2
fi

echo -n -e "${result}"
exit 0
